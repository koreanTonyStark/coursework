!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AC	checker.cpp	/^void AC(string* patterns, string text, int num_patterns)$/;"	f	signature:(string* patterns, string text, int num_patterns)
ALPHABET_SIZE	checker.cpp	20;"	d	file:
ALPHABET_SIZE	hw1.cpp	18;"	d	file:
BakerBird	checker.cpp	/^void BakerBird(string* text, string* patterns,int num_ptrns, int num_text, ofstream& osf)$/;"	f	signature:(string* text, string* patterns,int num_ptrns, int num_text, ofstream& osf)
BakerBird	hw1.cpp	/^void BakerBird(string* text, string* patterns,int num_ptrns, int num_text, ofstream& osf)$/;"	f	signature:(string* text, string* patterns,int num_ptrns, int num_text, ofstream& osf)
CC	Makefile	/^CC = g++$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g3 -Wall -Werror -O3$/;"	m
KMP	checker.cpp	/^void KMP(string text, string pattern)$/;"	f	signature:(string text, string pattern)
Next	hw1.cpp	/^void Next(string* pattern, int *h_func, int length)$/;"	f	signature:(string* pattern, int *h_func, int length)
OBJS1	Makefile	/^OBJS1 = hw1.o$/;"	m
OBJS2	Makefile	/^OBJS2 = checker.o$/;"	m
Prefix	checker.cpp	/^void Prefix(string pattern, int* failure_func, int length)$/;"	f	signature:(string pattern, int* failure_func, int length)
Prefix	hw1.cpp	/^void Prefix(string pattern, int* failure_func, int length)$/;"	f	signature:(string pattern, int* failure_func, int length)
Prefix2	checker.cpp	/^void Prefix2(char* pattern, int* failure_func, int length)$/;"	f	signature:(char* pattern, int* failure_func, int length)
SRCS1	Makefile	/^SRCS1 = $(OBJS:.o=.cpp)$/;"	m
SRCS2	Makefile	/^SRCS2 = $(OBJS2:.o=.cpp)$/;"	m
TARGET1	Makefile	/^TARGET1 = hw1$/;"	m
TARGET2	Makefile	/^TARGET2 = checker$/;"	m
answer_array	checker.cpp	/^int answer_array[101][101];$/;"	v
computeAutomata	checker.cpp	/^int computeAutomata(string *patterns, size_t num_ptrns, int g[][ALPHABET_SIZE], vector<string> *output)$/;"	f	signature:(string *patterns, size_t num_ptrns, int g[][ALPHABET_SIZE], vector<string> *output)
computeAutomata	hw1.cpp	/^int computeAutomata(string *patterns, size_t num_ptrns, int g[][ALPHABET_SIZE], vector<string> *output)$/;"	f	signature:(string *patterns, size_t num_ptrns, int g[][ALPHABET_SIZE], vector<string> *output)
computeFailureFunction	checker.cpp	/^int* computeFailureFunction(int g[][ALPHABET_SIZE], vector<string>* output, int node_size)$/;"	f	signature:(int g[][ALPHABET_SIZE], vector<string>* output, int node_size)
computeFailureFunction	hw1.cpp	/^int* computeFailureFunction(int g[][ALPHABET_SIZE], vector<string>* output, int node_size)$/;"	f	signature:(int g[][ALPHABET_SIZE], vector<string>* output, int node_size)
computeNodeSize	checker.cpp	/^int computeNodeSize(string *patterns, size_t num_ptrns)$/;"	f	signature:(string *patterns, size_t num_ptrns)
computeNodeSize	hw1.cpp	/^int computeNodeSize(string *patterns, size_t num_ptrns)$/;"	f	signature:(string *patterns, size_t num_ptrns)
main	checker.cpp	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	hw1.cpp	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
printInputInfo	checker.cpp	/^void printInputInfo(string text, string ptrn)$/;"	f	signature:(string text, string ptrn)
printPrefix	checker.cpp	/^void printPrefix(string pattern, int *fail, int length)$/;"	f	signature:(string pattern, int *fail, int length)
printPrefix2	checker.cpp	/^void printPrefix2(char *pattern, int *fail, int length)$/;"	f	signature:(char *pattern, int *fail, int length)
